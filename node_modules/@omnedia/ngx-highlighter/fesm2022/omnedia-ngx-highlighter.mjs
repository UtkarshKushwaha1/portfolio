import { isPlatformBrowser, CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { signal, PLATFORM_ID, Input, ViewChild, Inject, ChangeDetectionStrategy, Component } from '@angular/core';
import { annotate } from 'rough-notation';

class NgxHighlighterComponent {
    platformId;
    wrapperRef;
    action = 'highlight';
    color = '#d1daff';
    strokeWidth = 1.5;
    animationDuration = 600;
    iterations = 2;
    padding = 2;
    multiline = true;
    animateOnlyOnce = false;
    brackets = ['left', 'right'];
    animate = true;
    isInView = signal(false);
    io;
    annotation;
    animatedOnce = false;
    constructor(platformId) {
        this.platformId = platformId;
    }
    ngAfterViewInit() {
        if (!isPlatformBrowser(this.platformId))
            return;
        this.createAnnotation();
        this.io = new IntersectionObserver(([entry]) => {
            const inView = entry.isIntersecting;
            this.isInView.set(inView);
            if (inView && (!this.animateOnlyOnce || this.animateOnlyOnce && !this.animatedOnce)) {
                this.annotation?.show();
                this.animatedOnce = true;
            }
            else if (!this.animateOnlyOnce) {
                this.annotation?.hide();
            }
        });
        this.io.observe(this.wrapperRef.nativeElement);
    }
    ngOnChanges(changes) {
        if (!isPlatformBrowser(this.platformId) || !this.wrapperRef?.nativeElement)
            return;
        if (['action', 'color', 'strokeWidth', 'animationDuration', 'iterations', 'padding', 'multiline']
            .some(k => k in changes)) {
            this.annotation?.remove();
            this.createAnnotation();
            if (this.isInView())
                this.annotation?.show();
        }
    }
    createAnnotation() {
        this.annotation = annotate(this.wrapperRef.nativeElement, {
            type: this.action,
            color: this.color,
            strokeWidth: this.strokeWidth,
            animationDuration: this.animationDuration,
            iterations: this.iterations,
            padding: this.padding,
            multiline: this.multiline,
            brackets: this.brackets,
            animate: this.animate,
        });
    }
    ngOnDestroy() {
        this.io?.disconnect();
        this.annotation?.remove();
        this.annotation = undefined;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: NgxHighlighterComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "20.0.3", type: NgxHighlighterComponent, isStandalone: true, selector: "om-highlighter", inputs: { action: "action", color: "color", strokeWidth: "strokeWidth", animationDuration: "animationDuration", iterations: "iterations", padding: "padding", multiline: "multiline", animateOnlyOnce: "animateOnlyOnce", brackets: "brackets", animate: "animate" }, viewQueries: [{ propertyName: "wrapperRef", first: true, predicate: ["wrapper"], descendants: true }], usesOnChanges: true, ngImport: i0, template: "<span #wrapper class=\"om-highlighter\">\n  <ng-content></ng-content>\n</span>\n", styles: [".om-highlighter{position:relative;display:inline-block;background-color:transparent}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: NgxHighlighterComponent, decorators: [{
            type: Component,
            args: [{ selector: 'om-highlighter', standalone: true, imports: [CommonModule], changeDetection: ChangeDetectionStrategy.OnPush, template: "<span #wrapper class=\"om-highlighter\">\n  <ng-content></ng-content>\n</span>\n", styles: [".om-highlighter{position:relative;display:inline-block;background-color:transparent}\n"] }]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }], propDecorators: { wrapperRef: [{
                type: ViewChild,
                args: ['wrapper']
            }], action: [{
                type: Input
            }], color: [{
                type: Input
            }], strokeWidth: [{
                type: Input
            }], animationDuration: [{
                type: Input
            }], iterations: [{
                type: Input
            }], padding: [{
                type: Input
            }], multiline: [{
                type: Input
            }], animateOnlyOnce: [{
                type: Input
            }], brackets: [{
                type: Input
            }], animate: [{
                type: Input
            }] } });

/*
 * Public API Surface of ngx-highlighter
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgxHighlighterComponent };
//# sourceMappingURL=omnedia-ngx-highlighter.mjs.map
