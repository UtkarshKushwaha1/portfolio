import * as _angular_core from '@angular/core';
import { AfterViewInit, OnDestroy, ElementRef, QueryList, Renderer2 } from '@angular/core';
import { SafeHtml, DomSanitizer } from '@angular/platform-browser';

type TimelineEntry = {
    title: string;
    content: string;
};
type TimelineEntryTemplate = {
    title: SafeHtml;
    content: SafeHtml;
};

declare class NgxTimelineComponent implements AfterViewInit, OnDestroy {
    private readonly sanitizer;
    private readonly renderer;
    wrapperRef: ElementRef<HTMLElement>;
    entriesList: QueryList<ElementRef<HTMLElement>>;
    timelineBackgroundRef: ElementRef<HTMLElement>;
    timelineLineRef: ElementRef<HTMLElement>;
    timelineSvgRef: ElementRef<SVGElement>;
    timelinePathRef: ElementRef<SVGPathElement>;
    timelineGradientPathRef: ElementRef<SVGPathElement>;
    orientation: "left" | "right" | "switch";
    styleClass?: string;
    set entriesGap(gap: string);
    set entryGap(gap: string);
    set titleGap(gap: string);
    set pathWidth(pathWidth: string);
    set titleMaxWidth(titleMaxWidth: string);
    set pathColorValue(pathColor: string);
    set gradientColors(gradientColors: string[]);
    gradientStart: string;
    gradientEnd: string;
    pathColor: string;
    set dataValue(data: TimelineEntry[]);
    private data;
    templateData: _angular_core.WritableSignal<TimelineEntryTemplate[]>;
    style: _angular_core.WritableSignal<{}>;
    private ngContentRef?;
    private scrollableParent;
    private scrollListener;
    private updatePending;
    constructor(sanitizer: DomSanitizer, renderer: Renderer2);
    ngAfterViewInit(): void;
    private readonly destroy$;
    ngOnDestroy(): void;
    getViewEncapsulationTag(): void;
    addViewEncapsulationTag(): void;
    private insertAttributeInTags;
    private determineScrollContext;
    private setupScrollListener;
    private removeScrollListener;
    setHeight(): void;
    updateTimelineLine(): void;
    updateSvgPath(): void;
    calculateSvgPath(): string;
    static ɵfac: _angular_core.ɵɵFactoryDeclaration<NgxTimelineComponent, never>;
    static ɵcmp: _angular_core.ɵɵComponentDeclaration<NgxTimelineComponent, "om-timeline", never, { "orientation": { "alias": "orientation"; "required": false; }; "styleClass": { "alias": "styleClass"; "required": false; }; "entriesGap": { "alias": "entriesGap"; "required": false; }; "entryGap": { "alias": "entryGap"; "required": false; }; "titleGap": { "alias": "titleGap"; "required": false; }; "pathWidth": { "alias": "pathWidth"; "required": false; }; "titleMaxWidth": { "alias": "titleMaxWidth"; "required": false; }; "pathColorValue": { "alias": "pathColor"; "required": false; }; "gradientColors": { "alias": "gradientColors"; "required": false; }; "dataValue": { "alias": "data"; "required": false; }; }, {}, never, never, true, never>;
}

export { NgxTimelineComponent };
export type { TimelineEntry, TimelineEntryTemplate };
