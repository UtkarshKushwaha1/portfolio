import * as i0 from '@angular/core';
import { signal, Input, ChangeDetectionStrategy, Component } from '@angular/core';
import * as i1 from '@angular/common';
import { CommonModule } from '@angular/common';
import { map, concat, of, delay, from, skip, concatMap, repeat, ignoreElements, interval, take } from 'rxjs';

class NgxTypewriterComponent {
    words;
    disableLoop = false;
    writeSpeed = 40;
    deleteDelay = 3500;
    writeDelay = 50;
    startDelay = 0;
    styleClass;
    set textCursorColor(textCursorColor) {
        this.style.update(prev => ({ ...prev, '--text-cursor-color': textCursorColor }));
    }
    typeWriterText$;
    wordsCount = 0;
    style = signal({});
    ngOnInit() {
        if (!this.words) {
            throw Error("[words] is required!");
        }
        this.typeWriterText$ = this.typeWriteEffect()
            .pipe(map((text) => text));
    }
    typeWriteEffect() {
        this.wordsCount = this.words.length;
        return this.startTypewriter(this.words);
    }
    startTypewriter(words) {
        if (this.disableLoop) {
            return concat(of(null).pipe(delay(this.startDelay)), from(words)).pipe(skip(1), concatMap((word) => this.typeEffect(word)));
        }
        return concat(of(null).pipe(delay(this.startDelay)), from(words)).pipe(skip(1), concatMap((word) => this.typeEffect(word)), repeat());
    }
    typeEffect(word) {
        if (this.disableLoop) {
            this.wordsCount -= 1;
        }
        return concat(this.typeWord(word), of("").pipe(delay(this.deleteDelay), ignoreElements()), this.typeWord(word, true), of("").pipe(delay(this.writeDelay), ignoreElements()));
    }
    typeWord(word, backwards) {
        if (this.disableLoop && this.wordsCount <= 0 && backwards) {
            return of(word);
        }
        return interval(this.writeSpeed).pipe(map((x) => {
            return backwards
                ? word.substring(0, word.length - x)
                : word.substring(0, x + 1);
        }), take(word.length + 1));
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: NgxTypewriterComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "20.0.3", type: NgxTypewriterComponent, isStandalone: true, selector: "om-typewriter", inputs: { words: "words", disableLoop: "disableLoop", writeSpeed: "writeSpeed", deleteDelay: "deleteDelay", writeDelay: "writeDelay", startDelay: "startDelay", styleClass: "styleClass", textCursorColor: "textCursorColor" }, ngImport: i0, template: "<p class=\"om-typewriter-text\" [ngClass]=\"styleClass\" [ngStyle]=\"style()\">\r\n  &#8203;{{ typeWriterText$ | async }}\r\n</p>\r\n", styles: [".om-typewriter-text{--text-cursor-color: #8a8a8a;position:relative;width:fit-content}.om-typewriter-text:after{content:\"\";position:absolute;top:0;right:-5px;bottom:0;height:90%;margin:auto;aspect-ratio:1/16;background-color:var(--text-cursor-color);animation:omTypewriter 1s infinite ease-in-out}@keyframes omTypewriter{0%{opacity:0}to{opacity:1}}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "pipe", type: i1.AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: NgxTypewriterComponent, decorators: [{
            type: Component,
            args: [{ selector: "om-typewriter", standalone: true, imports: [CommonModule], changeDetection: ChangeDetectionStrategy.OnPush, template: "<p class=\"om-typewriter-text\" [ngClass]=\"styleClass\" [ngStyle]=\"style()\">\r\n  &#8203;{{ typeWriterText$ | async }}\r\n</p>\r\n", styles: [".om-typewriter-text{--text-cursor-color: #8a8a8a;position:relative;width:fit-content}.om-typewriter-text:after{content:\"\";position:absolute;top:0;right:-5px;bottom:0;height:90%;margin:auto;aspect-ratio:1/16;background-color:var(--text-cursor-color);animation:omTypewriter 1s infinite ease-in-out}@keyframes omTypewriter{0%{opacity:0}to{opacity:1}}\n"] }]
        }], propDecorators: { words: [{
                type: Input,
                args: [{ required: true, alias: "words" }]
            }], disableLoop: [{
                type: Input,
                args: ["disableLoop"]
            }], writeSpeed: [{
                type: Input,
                args: ["writeSpeed"]
            }], deleteDelay: [{
                type: Input,
                args: ["deleteDelay"]
            }], writeDelay: [{
                type: Input,
                args: ["writeDelay"]
            }], startDelay: [{
                type: Input,
                args: ["startDelay"]
            }], styleClass: [{
                type: Input,
                args: ["styleClass"]
            }], textCursorColor: [{
                type: Input,
                args: ["textCursorColor"]
            }] } });

/*
 * Public API Surface of ngx-typewriter
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgxTypewriterComponent };
//# sourceMappingURL=omnedia-ngx-typewriter.mjs.map
